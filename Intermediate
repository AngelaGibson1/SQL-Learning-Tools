# This section will cover JOINs, subqueries, conditional expressions, and set operations

# please check out this video by Alex The Analyst - It will warm you up for this 
# https://www.youtube.com/watch?v=9URM1_2S0ho


# JOINs

# A company stores employee data in one table and department data in another table. 
# The HR team wants a report showing each employees first name, last name, and department name 
# Before working with multiple tables, it's important to understand primary keys and foreign keys. These keys define relationships between tables and help ensure data integrity.

# A primary key is a unique identifier for each row in a table. It ensures that each record is distinct and can be referenced by other tables.

CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department_id INT,
    salary DECIMAL(10,2)
);

# A foreign key is a column in one table that refers to the primary key in another table. It establishes a relationship between tables.

CREATE TABLE departments (
    department_id INT PRIMARY KEY,
    department_name VARCHAR(50)
);


# Study those two tables closely - Note their primaries keys, but now also note what column they both share. 

# In the employees table, department_id is a foreign key that links to the department_id in the departments table.

# lets go back to the original question 
# The HR team wants a report showing each employees first name, last name, and department name 

## To solve this out, I would typically walk my way backwards 

# what do i know for sure -- I need to JOIN both tables using the departments column 

JOIN departments ON employees.deparments_id = departments.departments_id -- note that I called the table first then stated the column 

# From here, we go back to the basics - which table are you calling FROM -- employees 

# what are you SELECTING?  - remember name of table.column 

SELECT employees.first_name, employees.last_name, departments.deparment_name
FROM employees 
JOIN departments ON employees.deparments_id = departments.departments_id;


# there you just created two tables then joined them using a foreign key! 

# Lets take a quick moment to talk about JOINs

# INNER JOIN: Returns matching records from both tables. -- often simply referred to as JOIN since it is the default join type in SQL.
# LEFT JOIN: Returns all records from the left table, and matching records from the right.
# RIGHT JOIN: Returns all records from the right table, and matching records from the left.
# FULL OUTER JOIN: Returns all records from both tables, matching where possible.

# Using Subqueries 

# A subquery is a query inside another query. It helps break down complex problems. 

# HR wants to know all employees whose salary is above the company's average salary -- 

# Once again here I would work my way through what I know. 

# To find average salary I would 

SELECT AVG(salary)
FROM employees 

# Next I would build out the latter part - I need all employees whose salary is above the company average. 
# I personally would pull first_name, and last_name to be able to view the employees better 


SELECT first_name, last_name, salary 
FROM employees 
WHERE salary > ( SELECT AVG(salary)
FROM employees) 


# Using CASE for Conditional Logic 

# The case statement works like an IF-ELSE statement in SQL, allowing dynamic categorization of data. 


# A question you might get where this would be useful is --
# Classify employees based on salary range as 'Low', 'Medium', or 'High'

SELECT first_name, last_name, salary 
    CASE
        WHEN salary < 50000 THEN 'Low'
        WHEN salary BETWEEN 50000 AND 100000 THEN  'High'
        ELSE 'High'
    END AS salary_category
FROM employees; 


# Set Operations 

# Set operations allow you to comubine or compare multiple result sets. 

# Find all employees who have either requested remote work or belong to the IT department, but not both. 
# The remote_work_requests table tracks employees who have submitted remote work requests, with each request linked to an employee_id from the employees table.

(SELECT first_name, last_name FROM employees WHERE department = 'IT')
EXCEPT 
(SELECT first_name, last_name FROM remote_work_request);


# Common Table Expressions (CTEs) 

# A common table is a temporary result set that simplifies complex queries. 

# Let's say the question is to find employees who earn more than the average salary in their department. 
# You are working with two tables -- the Department table and the Employees table 
# Foreign Key again is the department_id like we had in the basics examples 

# first step would be to group employees by department_id and calculate the AVG(salary) for each group 

WITH department_avg AS(
    SELECT department_id, AVG(salary) AS avg_salary
    FROM employees
    GROUP BY department_id
)

# Next compare each employees salary to their departments average 

# We join the employees table with the department_avg CTE to access department-level salary information.

# filter out employees whose salary is less than or equal to the average 

SELECT employees.first_name, employees.last_name, employees.salary, departments.department_name
FROM employees
JOIN department_avg ON employees.department_id = department_avg.department_id
JOIN departments ON employees.department_id = departments.department_id
WHERE employees.salary > department_avg.avg_salary;

# Finally retrieve relevant columns for better readability 

WITH department_avg AS (
  SELECT department_id, AVG(salary) AS avg_salary
  FROM employees
  GROUP BY department_id
)
SELECT employees.first_name, employees.last_name, employees.salary, departments.department_name
FROM employees
JOIN department_avg ON employees.department_id = department_avg.department_id
JOIN departments ON employees.department_id = departments.department_id
WHERE employees.salary > department_avg.avg_salary;

# By following this structured approach, we can efficiently find employees who earn above the average salary within their department.





